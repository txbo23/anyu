1.python代码执行速度测试模块：timeit.Timer().timeit(number=)
2.线性表分为顺序表和链表，顺序表又分一体式结构和分离式结构。python中list是基于分离式技术实现的动态顺序表。
3.关于self
python中类的代码（函数），若需要访问当前的实例中的变量（属性）和函数，则需要对应的实例对象本身，故需要self。
若未在__init__中初始化对应的实例变量的话，导致后续引用实例变量会出错，因而会出现AttributeError的错误。
和普通函数相比，在类中定义函数只有一点不同，就是第一参数永远是类的本身实例变量self，并且调用时，不用传递该参数。
内置方法__init__的第一参数永远是self，表示创建的类实例本身，如调用class Test中的函数f()时 t.f()等同于Test.f(t)。 
参考链接：https://blog.csdn.net/CLHugh/article/details/75000104
4.关于链表、栈、队列
链表分为单向链表、单向循环链表、双向链表。栈只能允许在容器的一端进行加入数据（push）和输出数据（pop）的运算，栈可以用顺序表实现，也可以用链表实现。
队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表，同栈一样，队列也可以用顺序表或者链表实现。
双端队列（double-ended queue），是一种具有队列和栈的性质的数据结构。
5.关于下划线
以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用“from xxx import *”而导入；
以双下划线开头的（__foo）代表类的私有成员；以双下划线开头和结尾的（__foo__）代表python里特殊方法专用的标识，如 __init__（）代表类的构造函数。
6.关于引用
Python函数的参数传值使用的是引用传值，也就是说传的是参数的内存地址值，因此在函数中改变参数的值，函数外也会改变。
这里需要注意的是如果传的参数类型是不可改变的，如String类型、元组类型，函数内如需改变参数的值，则相当于重新新建了一个对象。
7.运算表达式
Python的表达式写法与C/C++类似。只是在某些写法有所差别。
主要的算术运算符与C/C++类似。+, -, *, /, //, **, ~, %分别表示加法或者取正、减法或者取负、乘法、除法、整除、乘方、取补、取模。
>>, <<表示右移和左移。&, |, ^表示二进制的AND, OR, XOR运算。>, <, ==, !=, <=, >=用于比较两个表达式的值，分别表示大于、小于、等于、不等于、小于等于、大于等于。
在这些运算符里面，~, |, ^, &, <<, >>必须应用于整数。 Python使用and, or, not表示逻辑运算。



